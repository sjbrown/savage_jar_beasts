#SECURITY NOTE: anything in here can be created simply by sending the 
# class name over the network.  This is a potential vulnerability
# I wouldn't suggest letting any of these classes DO anything, especially
# things like file system access, or allocating huge amounts of memory

class Event:
	"""this is a superclass for any events that might be generated by an
	object and sent to the EventManager"""
	def __init__(self):
		self.name = "Generic Event"

class TickEvent(Event):
	def __init__(self):
		self.name = "CPU Tick Event"

class ExceptionEvent(Event):
	"""..."""
	def __init__(self, msg):
		self.name = "An exception occurred that we can handle "+ msg
		self.msg = msg

class SecondEvent(Event):
	def __init__(self):
		self.name = "Clock One Second Event"

class QuitEvent(Event):
	def __init__(self):
		self.name = "Program Quit Event"

class MapBuiltEvent(Event):
	def __init__(self, map):
		self.name = "Map Finished Building Event"
		self.map = map

class GameStartRequest(Event):
	def __init__(self):
		self.name = "Game Start Request"

class GameStartedEvent(Event):
	def __init__(self, game):
		self.name = "Game Started Event"
		self.game = game

class CharactorMoveRequest(Event):
	def __init__(self, player, charactor, direction):
		self.name = "Charactor Move Request"
		self.player = player
		self.charactor = charactor
		self.direction = direction

class CharactorMoveEvent(Event):
	def __init__(self, charactor):
		self.name = "Charactor Move Event"
		self.charactor = charactor

class CharactorPlaceEvent(Event):
	"""this event occurs when a Charactor is *placed* in a sector, 
	ie it doesn't move there from an adjacent sector."""
	def __init__(self, charactor):
		self.name = "Charactor Placement Event"
		self.charactor = charactor



class ServerConnectEvent(Event):
	"""the client generates this when it detects that it has successfully
	connected to the server"""
	def __init__(self, serverReference):
		self.name = "Network Server Connection Event"
		self.server = serverReference

class ClientConnectEvent(Event):
	"""this event is generated by the Server whenever a client connects
	to it"""
	def __init__(self, client):
		self.name = "Network Client Connection Event"
		self.client = client

class ClientDisconnectEvent(Event):
	"""this event is generated by the Server when it finds that a client 
	is no longer connected"""
	def __init__(self, client):
		self.name = "Network Client Disconnection Event"
		self.client = client

class ExplicitClientDisconnectEvent(Event):
	"""this event is generated by the Server when the client explicitly 
	disconnects from it"""
	def __init__(self, client):
		self.name = "Explicit Network Client Disconnection Event"
		self.client = client

class PlayerClientMismatchEvent(Event):
	"""this event is generated by the Server when a client tries to do 
	something with a player he doesn't control"""
	def __init__(self, playerName):
		self.name = "Player / Client Mismatch"
		self.playerName = playerName



class GameSyncEvent(Event):
	"""..."""
	def __init__(self, game):
		self.name = "Game Synched to Authoritative State"
		self.game = game

class PlayerJoinRequest(Event):
	"""..."""
	def __init__(self, playerDict):
		self.name = "Player Joining Game Request"
		self.playerDict = playerDict
		if not playerDict.has_key( 'name' ):
			raise "UnnamedPlayerException"

class PlayerJoinEvent(Event):
	"""..."""
	def __init__(self, player):
		self.name = "Player Joined Game Event"
		self.player = player

class CharactorPlaceRequest(Event):
	"""..."""
	def __init__(self, player, charactor, sector):
		self.name = "Charactor Placement Request"
		self.player = player
		self.charactor = charactor
		self.sector = sector

#------------------------------------------------------------------------------
class GUIEvent(Event): pass

class AnimationTickEvent(TickEvent, GUIEvent):
	def __init__(self):
		self.name = "Timed Animation Tick Event"


class GUIBlockEvent(GUIEvent):
	"""..."""
	def __init__(self):
		self.name = "Block GUI Events Pending Completion of some task"

class GUIUnBlockEvent(GUIEvent):
	"""..."""
	def __init__(self):
		self.name = "Unblock the GUI"

class GUIFocusNextWidgetEvent(GUIEvent):
	"""..."""
	def __init__(self, layer=0):
		self.name = "Activate the next widget Event"
		self.layer = layer

class GUIFocusPrevWidgetEvent(GUIEvent):
	"""..."""
	def __init__(self, layer=0):
		self.name = "Activate the previous widget Event"
		self.layer = layer

class GUIFocusThisWidgetEvent(GUIEvent):
	"""..."""
	def __init__(self, widget):
		self.name = "Activate particular widget Event"
		self.widget = widget

class GUIPressEvent(GUIEvent):
	"""..."""
	def __init__(self, layer=0):
		self.name = "All Active widgets get pressed Event"
		self.layer = layer

class GUIKeyEvent(GUIEvent):
	"""..."""
	def __init__(self, key, layer=0):
		self.name = "key pressed Event"
		self.key = key
		self.layer = layer

class GUIControlKeyEvent(GUIEvent):
	"""..."""
	def __init__(self, key):
		self.name = "Non-Printablekey pressed Event"
		self.key = key

class GUIClickEvent(GUIEvent):
	"""..."""
	def __init__(self, pos, layer=0):
		self.name = "Mouse Click Event"
		self.pos = pos
		self.layer = layer

class GUIMouseMoveEvent(GUIEvent):
	"""..."""
	def __init__(self, pos, layer=0):
		self.name = "Mouse Moved Event"
		self.pos = pos
		self.layer = layer

class GUICharactorSelectedEvent(GUIEvent):
	"""..."""
	def __init__(self, charactor, wipeOthers=1):
		self.name = "A Charactor has been selected by the user"
		self.charactor = charactor
		self.wipeOthers = wipeOthers


class GUICharactorUnSelectedEvent(GUIEvent):
	"""..."""
	def __init__(self, charactor):
		self.name = "A Charactor has been unselected by the user"
		self.charactor = charactor

class GUIChangeScreenRequest(GUIEvent):
	"""..."""
	def __init__(self, key):
		self.name = "Change the active GUI to the one referenced by key"+str(key)
		self.key = key


class GUIDialogAddRequest(GUIEvent):
	"""..."""
	def __init__(self, key, msg=""):
		self.name = "Add a new dialog on top"
		self.key = key
		self.msg = msg

class GUIDialogRemoveRequest(GUIEvent):
	"""..."""
	def __init__(self, key):
		self.name = "Remove a new dialog from the top"
		self.key = key

class GUIScrollRequest(GUIEvent):
	"""..."""
	def __init__( self, target, amount ):
		self.name = "Request to Scroll by certain amount"
		self.target = target
		self.amount = amount

class GUISelectItemEvent(GUIEvent):
	"""..."""
	def __init__( self, item ):
		self.name = "Select an Item"
		self.item = item


class TownScreenSelectEvent(GUIEvent):
	"""..."""
	def __init__(self, pos, layer=0):
		self.name = "Select Mouse Click Event"
		self.pos = pos
		self.layer = layer

class TownScreenActionEvent(GUIEvent):
	"""..."""
	def __init__(self, pos, layer=0):
		self.name = "Action Mouse Click Event"
		self.pos = pos
		self.layer = layer

#------- Duel Events ----------------------
class DuelStartRequest(Event):
	"""..."""
	def __init__(self, player1, player2=None):
		self.name = "Request Duel Start"
		self.player1 = player1
		self.player2 = player2

class DuelStartEvent(Event):
	"""..."""
	def __init__(self, duel):
		self.name = "Duel Started Event"
		self.duel = duel

class DuelChangePlayerEvent(Event):
	"""..."""
	def __init__(self, duel):
		self.name = "Duel Changed Active Player"
		self.duel = duel

class DuelChangeStepEvent(Event):
	"""..."""
	def __init__(self, duel):
		self.name = "Duel Changed Step "+str(duel.step)
		self.duel = duel

class DuelContinueRequest(Event):
	"""..."""
	def __init__(self, player):
		self.name = "Request from Player to goto next Duel step"
		self.player = player

class DuelTurnFinishedEvent(Event):
	"""..."""
	def __init__(self, duel):
		self.name = "Player's Duel Turn Finished Event"
		self.duel = duel

class DuelFinishEvent(Event):
	"""..."""
	def __init__(self, duel):
		self.name = "Duel Finished Event"
		self.duel = duel

class DuelFlipCardRequest(Event):
	"""..."""
	def __init__(self, card, duel):
		self.name = "Duel Requests FlipCard"
		self.card = card
		self.duel = duel

class DuelFlipCardEvent(Event):
	"""..."""
	def __init__(self, card, duel):
		self.name = "Card Flip"
		self.card = card
		self.duel = duel



#------- Player  Events ----------------------

class PlayerExploreRequest(Event):
	"""..."""
	def __init__(self, player):
		self.name = "Explore Request"
		self.player = player

class PlayerExplorationEvent(Event):
	"""..."""
	def __init__(self, player, turns):
		self.name = "Player Explore "
		self.player = player
		self.turns = turns

class PlayerRetreatRequest(Event):
	"""..."""
	def __init__(self, player):
		self.name = "Player Requests Retreat"
		self.player = player

class PlayerRetreatEvent(Event):
	"""..."""
	def __init__(self, player):
		self.name = "Player Retreats"
		self.player = player



#------- Charactor Events ----------------------

class CharactorAttackRequest(Event):
	"""..."""
	def __init__(self, attacker, defender):
		self.name = "Charactor Requests Attack"
		self.attacker = attacker
		self.defender = defender

class CharactorAttackInitiated(Event):
	"""..."""
	def __init__(self, attacker, defender, weapon, power):
		self.name = "Charactor Attack Initiated"
		self.attacker = attacker
		self.defender = defender
		self.weapon = weapon
		self.power = power

class CharactorAttackFinished(Event):
	"""..."""
	def __init__(self, attacker, defender, weapon, damage):
		self.name = "Charactor Attack Finishes"
		self.attacker = attacker
		self.defender = defender
		self.weapon = weapon
		self.damage = damage

class CharactorDeathEvent(Event):
	def __init__(self, charactor ):
		self.name = "Charactor Died"
		self.charactor = charactor

class CharactorPlayCardRequest(Event):
	"""..."""
	def __init__(self, charactor, card):
		self.name = "Charactor Requests PlayCard"
		self.charactor = charactor
		self.card = card

class CharactorPlayCardEvent(Event):
	"""..."""
	def __init__(self, charactor, card):
		self.name = "Charactor Played Card"
		self.charactor = charactor
		self.card = card


#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
class ModelEvent(Event): pass
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# DUEL EVENTS
#-----------------------------------------------------------------------------
class EventItemUsed(ModelEvent):
	def __init__(self, userCharactor, item, target=None):
		self.name = "Item Used"
		self.user = userCharactor
		self.item = item
		self.target = target
#-----------------------------------------------------------------------------
class EventCharactorTurnFinished(ModelEvent):
	def __init__(self, userCharactor ):
		self.name = "Turn Done"
		self.user = userCharactor
#-----------------------------------------------------------------------------
class EventPlayerTurnFinished(ModelEvent):
	def __init__(self, player ):
		self.name = "Turn Done"
		self.user = player 
#-----------------------------------------------------------------------------
class EventInventoryChanged(ModelEvent):
	def __init__(self, inventory ):
		self.name = "Inventory Change"
		self.inventory = inventory
#-----------------------------------------------------------------------------
class EventFightFinished(ModelEvent):
	def __init__(self ):
		self.name = "Fight Done"
		
#-----------------------------------------------------------------------------
class AnnounceDuelAvailability(ModelEvent):
	def __init__(self ):
		self.name = "Ann: Duel Availability"
		
#-----------------------------------------------------------------------------
class WithdrawDuelAvailability(ModelEvent):
	def __init__(self ):
		self.name = "Withdraw Duel Availability"
		
		
#-----------------------------------------------------------------------------
# STORE EVENTS
#-----------------------------------------------------------------------------
class GoToStoreEvent(ModelEvent):
	def __init__(self, player ):
		self.name = "Player goes to Store screen"
		self.player = player 
#-----------------------------------------------------------------------------
class GoToStoreRequest(Event):
	def __init__(self, player):
		self.name = "Go To Store Request"
		self.player = player 
#-----------------------------------------------------------------------------
class GoToTownEvent(ModelEvent):
	def __init__(self, player ):
		self.name = "Player goes to town screen"
		self.player = player 
#-----------------------------------------------------------------------------
class GoToTownRequest(Event):
	def __init__(self, player):
		self.name = "Go To Town Request"
		self.player = player 
#-----------------------------------------------------------------------------
class BuyItemEvent(ModelEvent):
	def __init__(self, charactor, item, seller=None):
		self.name = "charactor buys item"
		self.charactor = charactor
		self.item = item
		self.seller = seller
#-----------------------------------------------------------------------------
class BuyItemRequest(Event):
	def __init__(self, charactor, item, seller=None):
		self.name = "charactor requests buys item"
		self.charactor = charactor
		self.item = item
		self.seller = seller
